//-
//- Copyright (c) Microsoft.
//- Licensed under the MIT license. See LICENSE file in the project root for full license information.
//-

extends ../layout

mixin simplePersonView(account)
  - var shorthandName = account.login
  div.horizontal-space-right.vertical-space.pull-left(style='width:36px;height:36px;display:block;vertical-align:middle')
    if account.avatar_url
      img(src=account.avatar_url + '&s=96', style='width:36px;height:36px', title='Avatar of ' + shorthandName)
  div(style='display:block;vertical-align:middle')
    h4
      a(href='/people?q=' + account.login)= shorthandName
    //-ul.list-inline
      if shorthandName && shorthandName !== account.login
        li
          span(title=account.login + ' is the GitHub username for ' + shorthandName)= account.login
      if corporateIdentity
        if link && !corporate
          li.text-warning!= octicon('link', 16)
          li
            span(title=link.aadoid)= link.aadupn
        else
          li!= octicon('link', 16)
          li
            span(title=corporateIdentity + ' is the corporate identity for ' + shorthandName)= corporateIdentity
        //- just corporate e-mails here, not user emails
        if email
          li
            a(href='mailto:' + email, title='Send corporate email to ' + email)
              != octicon('mail', 16)
      if serviceAccount
        li!= octicon('hubot', 16)
        li Service account

mixin teamsList(teams, hideJoinOption)
  if teams && teams.length > 0
    table(style='width:100%')
      tbody
        each permission in teams
          - var team = permission.team
          tr
            td
              ul.list-inline
                - var isMember = teamSets && teamSets.member.has(team.id)
                //- formerly: permission.relativeJoinLink
                if hideJoinOption
                  li
                    ul.list-unstyled
                      li: strong= team.name
                      li: p= team.description
                else
                  li
                    a.btn.btn-sm.btn-muted-more(href=permission.relativePortalLink, title=team.description)= team.name
                if teamSets && teamSets.maintained.has(team.id)
                  li.text-primary You're a maintainer
                else if teamSets && teamSets.member.has(team.id)
                  li.text-primary You're a member
              if team.description && !hideJoinOption
                p= team.description
  else
    p No teams with this permission.

block content

  //- Services
  - var languageColor = viewServices.languageColor
  - var octicon = viewServices.octicon
  - var fileSize = viewServices.fileSize
  - var moment = viewServices.moment

  //- View constants
  - var maxReaders = 10

  //- Variables
  - var githubUrl = 'https://github.com/' + repo.full_name
  - var cloneUrl = repo.clone_url
  - var sshUrl = repo.ssh_url
  - var admin = repoPermissions && repoPermissions.allowAdministration

  .container
    .row: .col-md-12
        if fromReposPage
          .nav
            ul.pager.zero-pad-bottom
              li.previous
                a(href='javascript:window.history.back()')
                  span(aria-hidden=true) &larr;
                  = ' Back'
        
        if repositoryMetadataEntity && repositoryMetadataEntity.lockdownState && repositoryMetadataEntity.lockdownState !== 'unlocked'
          div.label.label-danger SETUP INCOMPLETE
        if repositoryMetadataEntity && (!repositoryMetadataEntity.lockdownState || repositoryMetadataEntity.lockdownState == 'unlocked') && releaseReviewObject && releaseReviewObject.state && releaseReviewObject.state !== 'Completed' && repository.private === false
          div.label.label-danger RELEASED BEFORE COMPLETION OF BUSINESS REVIEW
        
        - var hugeHeading = repo.name.length < 33
        h1(class={huge: hugeHeading})
          a(href='https://github.com/' + repo.full_name, target="_blank")= repo.name
          if repo.private === true
            | &nbsp;
            .label.label-warning(class={shrink66: !hugeHeading, shrink50: hugeHeading}) Private
        h6= repo.full_name.replace('/' + repo.name, '') + ' organization'
        if repo.fork
          h6
            | Forked&nbsp;
            if entity.parent && entity.parent.full_name
                | from&nbsp;
                a(href='https://github.com/' + entity.parent.full_name, target='_new')= entity.parent.full_name

        if repo.description
          p.lead=repo.description

    include ./pills

    .row
      .col-md-8

        small
          ul.list-inline.list-horizontal-space
            //- NOTES:
            //- * Can minimize some; 10,827 becomes 10.8k, for example

            if repo.language
              li
                span(style={color: languageColor(repo.language)})
                  != octicon('primitive-dot', 10)
                = ' ' + repo.language
            if repo.license && repo.license.featured && repo.license.name
              li
                != octicon('law', 15)
                = ' ' + repo.license.name
            if repo.stargazers_count
              li
                != octicon('star', 15)
                = ' ' + repo.stargazers_count.toLocaleString()
            if repo.forks_count
              li
                != octicon('repo-forked', 12)
                = ' ' + repo.forks_count.toLocaleString()
            if repo.size
              li
                != octicon('database', 13)
                = ' ' + fileSize(repo.size * 1024)
            if entity.disabled
              li: strong DISABLED BY GITHUB
            if repo.fork
              li
                != octicon('repo-forked', 15)
                small &nbsp;fork&nbsp;
                if entity.parent && entity.parent.full_name
                  small
                    | upstream:&nbsp;
                    a(href='https://github.com/' + entity.parent.full_name, target='_new')= entity.parent.full_name
        ul.list-inline(style='margin-top:24px;margin-bottom:48px')
          li: a.btn.btn-sm.btn-muted-more(href=githubUrl, target="_blank", title='View ' + repo.full_name + ' on GitHub.com')
            = 'Open on GitHub.com '
            != octicon('mark-github', 18)
          if cloneUrl
            li: a.btn.btn-sm.btn-muted-more(href='https://github.com/' + repo.full_name, target="_blank") HTTPS clone
          if sshUrl
            li: a.btn.btn-sm.btn-muted-more(href='https://github.com/' + repo.full_name, target="_blank") SSH clone
          if repo.homepage
            li: a.btn.btn-sm.btn-muted-more(href=repo.homepage, target='_new', title=repo.homepage) Homepage

        if repo.moment
          //-h2 Timeline
          ul.list-inline.list-horizontal-space
            if repo.moment.pushed_at
              li
                | Commits pushed
                br
                strong= repo.moment.pushed_at
            if repo.moment.updated_at
              li
                | Updated
                br
                strong= repo.moment.updated_at
            if repo.moment.created_at
              li
                | Created
                br
                strong= repo.moment.created_at

      .col-md-4
        if admin
          h3 Repository management

          ul.list-unstyled.list-vspace
            li
              a.btn.btn-sm(
                class=repoPermissions.admin ? 'btn-primary' : 'btn-muted-more',
                href=githubUrl,
                target="_blank",
                title='View ' + repo.full_name + ' on GitHub.com')
                = 'Manage on GitHub.com '
                != octicon('mark-github', 18)
            if !repoPermissions.admin
              li: p.
                You are not a GitHub repo administrator for this repo and may not be able to manage all settings directly on GitHub.
            li: a.btn.btn-sm.btn-muted-more(
              href='https://github.com/' + repo.full_name + '/settings',
              target='_blank'
            ) GitHub Settings
            li: a.btn.btn-sm.btn-muted-more(
              href='https://github.com/' + repo.full_name + '/settings/collaboration',
              target='_blank'
            ) Outside collaborators
            li: a.btn.btn-sm.btn-muted-more(
              href='https://github.com/' + repo.full_name + '/settings/collaboration',
              target='_blank'
            ) Team permissions
            li: a.btn.btn-sm.btn-muted-more(
              href='https://github.com/' + repo.full_name + '/settings/hooks',
              target='_blank'
            ) Webhooks

            if repoPermissions.allowAdministration && repo.private === true
              ul.list-unstyled.list-vspace
                li
                  form(method='post')
                    input.btn.btn-sm(
                      type='submit',
                      name='make-repo-public'
                      class='btn-danger',
                      value='Make repo public',
                      onclick='return confirm(\'Are you sure that you want to make this repo public?\');'
                      title='Click to toggle this repo from private to public')

    if repositoryMetadataEntity && repositoryMetadataEntity.repositoryName && repositoryMetadataEntity.organizationName
      #corporateMetadata
        hr

        if repositoryMetadataEntity.lockdownState == 'locked' || repositoryMetadataEntity.lockdownState == 'administratorLocked'
          .row: .col-md-12
            h3
              if repository.fork
                | Fork Setup
              else
                | Repository Setup
              = ' '
              span.label.label-default INCOMPLETE

            if repositoryMetadataEntity.lockdownState == 'locked'
              h5 LOCKED REPOSITORY
              if repository.fork
                strong This repository has been approved by a corporate GitHub administrator and is waiting for the original user to finalize setting up the fork.
              if activeUserCorporateId == repositoryMetadataEntity.createdByCorporateId
                p You created this repository on GitHub.com but have not yet completed configuring your repository.
                p: a.btn.btn-sm.btn-primary(href='/' + organization.name + '/wizard?existingreponame=' + repository.name + '&existingrepoid=' + repository.id) Complete repository setup
              else
                p
                  small Only the individual who created the repo #{repositoryMetadataEntity.createdByCorporateUsername} can complete the setup wizard through the following link:
                  br
                  a.btn.btn-sm.btn-muted(href='/' + organization.name + '/wizard?existingreponame=' + repository.name + '&existingrepoid=' + repository.id) Complete repository setup

            if repositoryMetadataEntity.lockdownState == 'administratorLocked'
              h5 AWAITING MORE INFORMATION
              p This #{repository.fork ? 'fork' : 'repository'} needs to be approved by a corporate GitHub administrator after the person who created the fork should reach out to the #[a(href='mailto:' + config.brand.operationsMail)= config.brand.operationsMail] to provide the business justification and other information:
              ul
                li Why an official fork is being created
                li Information including prior communications with the upstream open source community where the idea of forking was socialized
                li Information about how you will support this fork long-term, including responding to contributions through pull requests and issues
                li Whether there are plans to eventually contribute the forked changes upstream and delete this fork
                li Acknowledgement that you will help govern this fork and work with any others in this GitHub org who would also like to maintain this fork
                li Other useful information including your business goals relating to this project

              if activeUserCorporateId == repositoryMetadataEntity.createdByCorporateId
                p If this #{repository.fork ? 'fork' : 'repository'} was an accident, you can delete this #{repository.fork ? 'fork' : 'repository'} now:
                p: a.btn.btn-sm.btn-primary(href=href=repository.absoluteBaseUrl + 'delete') Delete now
              else
                p
                  small If this #{repository.fork ? 'fork' : 'repository'} was an accident, the individual who created it, #{repositoryMetadataEntity.createdByCorporateUsername}, can delete this #{repository.fork ? 'fork' : 'repository'} using the following link:
                  br
                  a.btn.btn-sm.btn-muted(href=repository.absoluteBaseUrl + 'delete') Delete now

          if repositoryMetadataEntity.createdByCorporateDisplayName || repositoryMetadataEntity.createdByCorporateUsername
            .row
              .col-md-12
                h5 CREATED BY
                  p
                    if repositoryMetadataEntity.createdByCorporateDisplayName
                      =repositoryMetadataEntity.createdByCorporateDisplayName
                    if repositoryMetadataEntity.createdByCorporateUsername
                      = ' / '
                      =repositoryMetadataEntity.createdByCorporateUsername
          hr

        h3 Corporate metadata

        - var createdCorporateDisplayName = createdUserLink && createdUserLink.corporateDisplayName ? createdUserLink.corporateDisplayName : repositoryMetadataEntity.createdByCorporateUsername
        - var createdCorporateId = createdUserLink && createdUserLink.corporateId ? createdUserLink.corporateId : repositoryMetadataEntity.createdByCorporateId
        if repositoryMetadataEntity.releaseReviewType
          .row
            .col-md-3: p.text-right Release type
            .col-md-9
              if repositoryMetadataEntity.releaseReviewType == 'SmallLibrariesToolsSamples'
                p Small library, tool, or sample
              else if repositoryMetadataEntity.releaseReviewType == 'NewReleaseReview'
                p Official release
              else if repositoryMetadataEntity.releaseReviewType == 'ExistingReleaseReview'
                p Additional repository associated with an existing official release
              else if repositoryMetadataEntity.releaseReviewType == 'Exempt'
                if createdCorporateDisplayName
                  p #{createdCorporateDisplayName} indicated this project is exempt from corporate GitHub policy
                else
                  p The user indicated this project is exempt from corporate GitHub policy
              else
                p= repositoryMetadataEntity.releaseReviewType
        if repositoryMetadataEntity.projectType
          .row
            .col-md-3: p.text-right Project type
            .col-md-9
              if repositoryMetadataEntity.projectType == 'sample code'
                p Sample code
              else if repositoryMetadataEntity.projectType == 'documentation'
                p Documentation
              else if repositoryMetadataEntity.projectType == 'other'
                p "Other"
              else if repositoryMetadataEntity.projectType == 'utility library / tool'
                p Small utility library or tool
              else if repositoryMetadataEntity.projectType == 'product code'
                p Product code
              else if repositoryMetadataEntity.projectType == 'sdk'
                p Software Development Kit (SDK)
              else
                p= repositoryMetadataEntity.projectType
        if repositoryMetadataEntity.releaseReviewUrl
          .row
            if repositoryMetadataEntity.releaseReviewType && repositoryMetadataEntity.releaseReviewType == 'NewReleaseReview'
              .col-md-3: p.text-right New release review
            else if repositoryMetadataEntity.releaseReviewType && repositoryMetadataEntity.releaseReviewType == 'ExistingReleaseReview'
              .col-md-3: p.text-right Existing release review
            else
              .col-md-3: p.text-right Review work item
            .col-md-9
              if releaseReviewWorkItemId
                p: a(href=repositoryMetadataEntity.releaseReviewUrl, target='_new')= releaseReviewWorkItemId
              else
                p: a(href=repositoryMetadataEntity.releaseReviewUrl, target='_new')= repositoryMetadataEntity.releaseReviewUrl
        if repositoryMetadataEntity.releaseReviewJustification
          .row
            .col-md-3: p.text-right Business justification
            .col-md-9
              if repository.private && repositoryMetadataEntity.releaseReviewJustification == 'Policy exception: Team project'
                if createdCorporateDisplayName
                  p This repository is a team project (private engineering) that should be located in an approved engineering system; however, #{createdCorporateDisplayName} indicated that this repository should be exempt from corporate GitHub policy.
                else
                  p This is a private engineering / team project that should be located in an approved engineering system.
              else if repository.private === false && repositoryMetadataEntity.releaseReviewJustification == 'Policy exception: Team project'
                p When created, the repository was marked as being a team project and exempt from corporate GitHub policy.
              else if repositoryMetadataEntity.releaseReviewJustification == 'Policy exception: Personal project'
                p This is a personal or individual repository that does not comply with corporate GitHub policies. #{createdCorporateDisplayName} indicated that this should be exempt from corporate GitHub policy when creating the repository.
              else if repository.private && repositoryMetadataEntity.releaseReviewJustification == 'Policy exception: Inner-source / Internal shared source'
                if createdCorporateDisplayName
                  p This repository is #[a(href='https://aka.ms/innersource') innersource] (private engineering) that should be located in an approved engineering system; however, #{createdCorporateDisplayName} indicated that this repository should be exempt from corporate GitHub policy.
                else
                  p This is a private engineering / team project that should be located in an approved engineering system. It was configured as an #[a(href='https://aka.ms/innersource') innersource] project.
              else if repository.private === false && repositoryMetadataEntity.releaseReviewJustification == 'Policy exception: Inner-source / Internal shared source'
                if createdCorporateDisplayName
                  p This repository is public, but was marked as an #[a(href='https://aka.ms/innersource') innersource] project. #{createdCorporateDisplayName} assigned this justification.
                else
                  p This is public, but was marked as a private repository. It was configured as an #[a(href='https://aka.ms/innersource') innersource] project.
              else
                p= repositoryMetadataEntity.releaseReviewJustification
        //- Release Review sub-section
        if releaseReviewObject
          .row
            - var review = releaseReviewObject
            - var state = review.state
            .col-md-3: p.text-right Review status
            .col-md-9
              ul.list-inline
                if state == 'Completed'
                  li: != octicon('check', 16)
                else if state == 'Initial Review'
                  li: != octicon('person', 16)
                else if state == 'Legal Review'
                  li: != octicon('law', 16)
                else if state == 'OSS Attorney Review'
                  li: != octicon('law', 16)
                else if state == 'Final Review'
                  li: != octicon('checklist', 16)
                else if state == 'Rejected'
                  li: != octicon('x', 16)
                else if state == 'Cancelled'
                  li: != octicon('x', 16)
                li= state
            //- Subsection for all review details
            if state !== 'Completed' && repository.private === false
              .row
                .col-md-3: p.text-right Risk
                .col-md-9: .alert.alert-danger(style='margin-bottom:16px')
                  strong This repository is already public, but the final business review has not been completed.
                  br
                  p Please review the #[a(style='color:#fff;text-decoration:underline', href='https://docs.opensource.microsoft.com/content/releasing/business-review-release.html', target='_new') business review process] to learn more about how to continue this review.
            .row
              .col-md-3: p.text-right Review details
              .col-md-9
                //-if review.guidance
                  .row
                    .col-md-12: p Guidance has been provided
                if state !== 'Completed' && review.createdDate
                  .row
                    .col-md-2: p Process started
                    .col-md-10: p= moment(review.createdDate).fromNow()
                if review.assignedTo && review.assignedTo.displayName
                  .row
                    .col-md-2: p: strong Assigned to
                    .col-md-10: p: strong= review.assignedTo.displayName
                //-if review.usageDetails
                  .row
                    .col-md-2: p Provided details
                    .col-md-10: p= review.usageDetails
                if review.reviewers
                  .row
                    .col-md-2: p Reviewers
                    .col-md-10
                      if review.reviewers.initialReviewer
                        .row
                          .col-md-3: p.text-right Initial business
                          .col-md-9: p= review.reviewers.initialReviewer.displayName
                      if review.reviewers.legalReviewer
                        .row
                          .col-md-3: p.text-right Legal
                          .col-md-9: p= review.reviewers.legalReviewer.displayName
                      if review.reviewers.ossAttorney
                        .row
                          .col-md-3: p.text-right Open source
                          .col-md-9: p= review.reviewers.ossAttorney.displayName
                      if review.reviewers.finalReviewer
                        .row
                          .col-md-3: p.text-right Final business
                          .col-md-9: p= review.reviewers.finalReviewer.displayName
        //- Lockdown state
        if repositoryMetadataEntity.lockdownState && repositoryMetadataEntity.lockdownState !== 'unlocked'
          .row
            .col-md-3: p.text-right Lockdown state
            .col-md-9
              if repositoryMetadataEntity.lockdownState == 'locked'
                p Awaiting setup by #{createdCorporateDisplayName}
              else
                p= repositoryMetadataEntity.lockdownState
        //- Basic metadata
        if repositoryMetadataEntity.repositoryName
          .row
            .col-md-3: p.text-right Repository name
            if repositoryMetadataEntity.repositoryName !== repository.name
              .col-md-9: p
                =repositoryMetadataEntity.repositoryName
                = ' '
                span.label.label-default RENAMED
            else
              .col-md-9: p= repositoryMetadataEntity.repositoryName
        if repository.fork
          .row
            .col-md-3: p.text-right Fork note
            .col-md-9: p This is an official fork of an upstream repository.
          if entity && entity.parent && entity.parent.full_name
            .row
              .col-md-3: p.text-right Upstream
              .col-md-9: p: a(href='https://github.com/' + entity.parent.full_name, target='_new')= entity.parent.full_name
        if repositoryMetadataEntity.created
          .row
            .col-md-3: p.text-right Created
            .col-md-9: p
              = moment(repositoryMetadataEntity.created).fromNow()
              br
              = repositoryMetadataEntity.created + ' (UTC)'
          if repository.private
            - var monthAgo = moment().subtract(1, 'month')
            - var twoWeeksAgo = moment().subtract(2, 'week')
            - var ninetyAgo = moment().subtract(3, 'month')
            - var createdMoment = moment(repositoryMetadataEntity.created)
            if ninetyAgo.isAfter(createdMoment)
              .row
                .col-md-3: p.text-right Age note
                .col-md-9: p This repository has been private for more than 90 days.
            else if monthAgo.isAfter(createdMoment)
              .row
                .col-md-3: p.text-right Age note
                .col-md-9: p This repository has been private for more than the recommended 30 day period before being released as public open source.
            else if twoWeeksAgo.isAfter(createdMoment)
              .row
                .col-md-3: p.text-right Age note
                .col-md-9: p It is recommended that this repository be made public soon, when ready.
            else
              .row
                .col-md-3: p.text-right New repository
                .col-md-9: p This is a new repository.
        if repositoryMetadataEntity.lockdownState
          .row
            .col-md-3: p.text-right Create source
            .col-md-9: p GitHub.com direct
        else if !repositoryMetadataEntity.lockdownState
          .row
            .col-md-3: p.text-right Create source
            .col-md-9: p New repository wizard
        if repositoryMetadataEntity.initialTemplate
          .row
            .col-md-3: p.text-right Created using template
            .col-md-9
              if repositoryMetadataEntity.initialTemplate == 'mit'
                p MIT
              else
                p= repositoryMetadataEntity.initialTemplate
        if repositoryMetadataEntity.initialLicense
          .row
            .col-md-3: p.text-right Initial license
            .col-md-9
              if repositoryMetadataEntity.initialLicense == 'mit'
                p MIT
              else
                p= repositoryMetadataEntity.initialLicense
        if repositoryMetadataEntity.initialRepositoryDescription
          .row
            .col-md-3: p.text-right Initial description
            .col-md-9: p= repositoryMetadataEntity.initialRepositoryDescription
        if repositoryMetadataEntity.initialRepositoryVisibility
          .row
            .col-md-3: p.text-right Initial visibility
            .col-md-9
              if repositoryMetadataEntity.initialRepositoryVisibility == 'public'
                p Public repository
              else if repositoryMetadataEntity.initialRepositoryVisibility == 'private'
                p Private repository
              else
                p= repositoryMetadataEntity.initialRepositoryVisibility
          if repositoryMetadataEntity.initialRepositoryVisibility == 'private' && !repository.private
            .row
              .col-md-3: p.text-right Visibility change
              .col-md-9: p This repository has been released and is now public.
          else if repositoryMetadataEntity.initialRepositoryVisibility == 'private' && repository.private
            .row
              .col-md-3: p.text-right Visibility unchanged
              .col-md-9: p This repository has not yet been released as public open source.
          else if repositoryMetadataEntity.initialRepositoryVisibility == 'public' && !repository.private && repositoryMetadataEntity.releaseReviewUrl
            .row
              .col-md-3: p.text-right Visibility note
              .col-md-9: p This repository was made public when created, at the same time the business review was started.
        if repositoryMetadataEntity.initialTeamPermissions && repositoryMetadataEntity.initialTeamPermissions.length
          .row
            .col-md-3: p.text-right Initial requested permissions
            .col-md-9: ul.list-unstyled
              each itp in repositoryMetadataEntity.initialTeamPermissions
                if itp.teamId
                  li: ul.list-inline
                    li: a(href='/teams?q=' + itp.teamId, target='_new')= itp.teamId
                    if itp.permission
                      li= ' (' + itp.permission + ')'
        if repositoryMetadataEntity.createdByThirdPartyUsername
          .row
            .col-md-3: p.text-right Created by GitHub login
            .col-md-9: p
              if repositoryMetadataEntity.createdByThirdPartyUsername.includes('[bot]')
                = repositoryMetadataEntity.createdByThirdPartyUsername
              else
                a(href='https://github.com/' + repositoryMetadataEntity.createdByThirdPartyUsername, target='_new')= repositoryMetadataEntity.createdByThirdPartyUsername
                = ' '
                if repositoryMetadataEntity.createdByThirdPartyId
                  small= '(' + repositoryMetadataEntity.createdByThirdPartyId + ')'
        if createdCorporateDisplayName
          .row
            .col-md-3: p.text-right Created by corporate user
            .col-md-9: ul.list-unstyled
              li: ul.list-inline
                if repositoryMetadataEntity.createdByCorporateDisplayName || createdUserLink
                  li= repositoryMetadataEntity.createdByCorporateDisplayName || createdUserLink.corporateDisplayName
                if createdCorporateId
                  li: small: a(href='/people?q=' + createdCorporateId, target='_new') (linked)
                else
                  li= ' (Not currently linked)'
              if repositoryMetadataEntity.createdByCorporateUsername || (createdUserLink && createdUserLink.corporateUsername)
                li= repositoryMetadataEntity.createdByCorporateUsername || (createdUserLink ? createdUserLink.corporateUsername : null)
              if createdUserLink && createdUserLink.isServiceAccount
                if createdUserLink && createdUserLink.serviceAccountMail
                  li
                    | Service account managed by
                    = ' '
                    a(href='mailto:' + createdUserLink.serviceAccountMail)= createdUserLink.serviceAccountMail
                else
                  li Service account
        if repositoryMetadataEntity.initialCorrelationId
          .row
            .col-md-3: p.text-right Correlation ID
            .col-md-9: p
              = repositoryMetadataEntity.initialCorrelationId
              br
              small If support is investigating any repository setup issues, this value will help retrieve telemetry.

    if config && config.microsoftOpenSource && config.microsoftOpenSource.githubInsights
      hr
      h4 Metrics
      p.
        Explore GitHub data, gain insights, build your community by learning to
        query the
        #[a(href=config.microsoftOpenSource.githubInsights, target='_new') GitHub Insights]
        data provided ghcrawler and CloudMine.
        #[a(href=config.microsoftOpenSource.githubInsights, target='_new') Learn more...]

    if repo && repo.id
      p: small= 'Repository ' + repo.full_name + ' has the GitHub ID ' + repo.id

    if reposDataAgeInformation
      p.text-primary(style='margin-bottom:24px')
        if reposDataAgeInformation.changed
          = 'Updated ' + reposDataAgeInformation.changed
        if reposDataAgeInformation.updated && reposDataAgeInformation.changed
          |, refreshed
        else
          | Refreshed
        if reposDataAgeInformation.updated
          = ' ' + reposDataAgeInformation.updated

    //-div
      h3 Raw metadata
      small: pre= JSON.stringify(repositoryMetadataEntity, undefined, 2)
